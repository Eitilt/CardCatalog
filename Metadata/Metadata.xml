<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Metadata</name>
    </assembly>
    <members>
        <member name="T:Metadata.MetadataFormat">
            <summary>
            A data-free class providing a common means to work with multiple
            metadata formats.
            </summary>
        </member>
        <member name="F:Metadata.MetadataFormat.tagValidationFunctions">
            <summary>
            Validation functions for each registered metadata format.
            </summary>
            <seealso cref="M:Metadata.MetadataFormat.Validate(System.String,System.IO.Stream)"/>
        </member>
        <member name="M:Metadata.MetadataFormat.Validate(System.String,System.IO.Stream)">
            <summary>
            Check whether the stream begins with metadata in the desired
            format.
            </summary>
            <param name="format">
            The short name of the metadata format.
            </param>
            <param name="stream">The Stream to test.</param>
            <returns>
            Whether the Stream begins with metadata in the desired format.
            </returns>
            <seealso cref="M:Metadata.MetadataFormat.Detect(System.IO.Stream)"/>
        </member>
        <member name="F:Metadata.MetadataFormat.tagFormats">
            <summary>
            The class encapsulating each registered metadata format.
            </summary>
            <seealso cref="M:Metadata.MetadataFormat.FormatType(System.String)"/>
        </member>
        <member name="M:Metadata.MetadataFormat.FormatType(System.String)">
            <summary>
            Retrieve the class implementing the desired metadata format.
            </summary>
            <param name="format">
            The short name of the metadata format.
            </param>
            <returns>The class encapsulating the metadata format.</returns>
            <seealso cref="M:Metadata.MetadataFormat.Construct(System.String,System.IO.Stream)"/>
        </member>
        <member name="F:Metadata.MetadataFormat.assemblies">
            <summary>
            A registry of previously-scanned assemblies in order to prevent
            unnecessary use of reflection methods.
            </summary>
        </member>
        <member name="M:Metadata.MetadataFormat.#cctor">
            <summary>
            Initialize static attributes.
            </summary>
            <seealso cref="M:Metadata.MetadataFormat.RefreshFormats"/>
        </member>
        <member name="M:Metadata.MetadataFormat.RefreshFormats">
            <summary>
            Scan all currently-loaded assemblies for implementations of
            metadata formats.
            </summary>
        </member>
        <member name="M:Metadata.MetadataFormat.Register(System.Reflection.Assembly)">
            <summary>
            Scan the given assembly for all types marked as implementing a
            metadata format in a suitable manner for automatic lookup.
            <para/>
            Subsequent calls on a previously-scanned assembly will be ignored
            in order to save unnecessary type reflection.
            </summary>
            <param name="assembly">The assembly to scan.</param>
            <seealso cref="T:Metadata.MetadataFormatAttribute"/>
        </member>
        <member name="M:Metadata.MetadataFormat.Register(System.Type)">
            <summary>
            Add the given type to the lookup tables according to the descriptor
            specified in its <see cref="P:Metadata.MetadataFormatAttribute.Name"/>.
            </summary>
            <remarks>
            Note that if multiple types are registered under the same name,
            any later registrations will override the previous.
            </remarks>
            <param name="format">The type to add.</param>
            <seealso cref="T:Metadata.MetadataFormatValidatorAttribute"/>
            <seealso cref="M:Metadata.MetadataFormat.FormatType(System.String)"/>
            <seealso cref="M:Metadata.MetadataFormat.Validate(System.String,System.IO.Stream)"/>
        </member>
        <member name="M:Metadata.MetadataFormat.Register(System.String,System.Type)">
            <summary>
            Add the given type to the lookup tables under the specified custom
            descriptor, even if it does not have any associated
            <see cref="T:Metadata.MetadataFormatAttribute"/>.
            </summary>
            <remarks>
            The validation function must still be identified with a
            <see cref="T:Metadata.MetadataFormatValidatorAttribute"/>.
            <para/>
            Note that if multiple types are registered under the same name,
            any later registrations will override the previous.
            </remarks>
            <param name="name">
            A short name for the format to be used as an access key for later
            lookups.
            <para/>
            It is recommended that this also be exposed as a constant.
            </param>
            <param name="format">The type to add.</param>
            <seealso cref="M:Metadata.MetadataFormat.FormatType(System.String)"/>
            <seealso cref="M:Metadata.MetadataFormat.Validate(System.String,System.IO.Stream)"/>
        </member>
        <member name="M:Metadata.MetadataFormat.Register(System.String,System.Reflection.MethodInfo)">
            <summary>
            Add the given method to the lookup tables under the specified
            custom descriptor.
            <para/>
            This should almost purely be called via
            <see cref="M:Metadata.MetadataFormat.Register(System.String,System.Type)"/>, and has been separated
            primarily for code clarity.
            </summary>
            <remarks>
            Note that if multiple methods are registered under the same name,
            any later registrations will override the previous.
            </remarks>
            <param name="name">
            A short name for the format to be used as an access key for later
            lookups.
            </param>
            <param name="method">The method to add.</param>
        </member>
        <member name="M:Metadata.MetadataFormat.Detect(System.IO.Stream)">
            <summary>
            Check the stream against all registered tag formats, and return
            those that match the header.
            </summary>
            <remarks>
            While, in theory, only a single header should match, the class
            structure is such that this is not a restriction; supporting this
            feature allows for nonstandard usages without exclusive headers.
            
            The callee is left to determine the best means of handling the
            case of Detect(...).Count > 1.
            </remarks>
            <param name="stream">The bytestream to test.</param>
            <returns>The keys of all matching formats.</returns>
            <seealso cref="M:Metadata.MetadataFormat.Validate(System.String,System.IO.Stream)"/>
        </member>
        <member name="M:Metadata.MetadataFormat.Construct(System.String,System.IO.Stream)">
            <summary>
            Parse metadata in the desired format from the current position in
            a stream.
            </summary>
            <param name="format">
            The short name of the metadata format.
            </param>
            <param name="stream">The bytestream to parse.</param>
            <returns>The parsed metadata.</returns>
            <seealso cref="M:Metadata.MetadataFormat.FormatType(System.String)"/>
        </member>
        <member name="T:Metadata.MetadataFormat.ITagFormat">
            <summary>
            Common properties to retrieve info from multiple tag formats.
            </summary>
        </member>
        <member name="P:Metadata.MetadataFormat.ITagFormat.Attributes">
            <summary>
            The proper standardized field redirects for the enclosing
            metadata format.
            </summary>
        </member>
        <member name="T:Metadata.MetadataFormatAssemblyAttribute">
            <summary>
            Indicate that the assembly should be scanned for classes marked with
            <see cref="T:Metadata.MetadataFormatAttribute"/> to automatically register.
            
            This class cannot be inherited.
            </summary>
            <seealso cref="T:Metadata.MetadataFormatAttribute"/>
            <seealso cref="M:Metadata.MetadataFormat.Register(System.Reflection.Assembly)"/>
        </member>
        <member name="T:Metadata.MetadataFormatAttribute">
            <summary>
            Indicate that the class implements a metadata format specification.
            
            This class cannot be inherited.
            </summary>
            <remarks>
            The class must implement <see cref="T:Metadata.MetadataFormat.ITagFormat"/>.
            </remarks>
            <seealso cref="T:Metadata.MetadataFormatAssemblyAttribute"/>
            <seealso cref="M:Metadata.MetadataFormat.Register(System.String,System.Type)"/>
        </member>
        <member name="P:Metadata.MetadataFormatAttribute.Name">
            <summary>
            The unique short name representing this format.
            </summary>
        </member>
        <member name="M:Metadata.MetadataFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Metadata.MetadataFormatAttribute"/> class with the specified
            <see cref="P:Metadata.MetadataFormatAttribute.Name"/>.
            </summary>
            <param name="name">
            The unique short name representing this format.
            <para/>
            It is recommended that this also be exposed as a constant on the
            type itself.
            </param>
        </member>
        <member name="T:Metadata.MetadataFormatValidatorAttribute">
            <summary>
            Marks a method as being a validation function checking a binary header
            against that defined by the enclosing metadata specification.
            
            This class cannot be inherited.
            </summary>
            <remarks>
            Note that this function must be able to accept only a
            <see cref="T:System.IO.Stream"/> and return a <see cref="T:System.Boolean"/>,
            while leaving <see cref="P:System.IO.Stream.Position"/> with the same
            (potentially non-0) value as it had before the function was called.
            
            This may change according to the TODO within
            <see cref="M:Metadata.MetadataFormat.Detect(System.IO.Stream)"/>, likely by
            adding a `HeaderLength` parameter to this attribute.
            </remarks>
            TODO: Add discussion of required signature according to exceptions in
            method Register(...)
        </member>
        <member name="T:Metadata.TagAttributes">
            <summary>
            Common format-agnostic attributes mapping to different fields
            depending on how each is expressed in the particular format.
            </summary>
        </member>
    </members>
</doc>
