//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgEitilt.CardCatalog.Strings {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Base {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Base() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AgEitilt.CardCatalog.Strings.Base", typeof(Base).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata tag field types must extend TagField.
        /// </summary>
        public static string Exception_ExtendFieldType {
            get {
                return ResourceManager.GetString("Exception_ExtendFieldType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a TagFieldAttribute does not declare a Format, at least one enclosing type must have an associated MetadataFormatAttribute.
        /// </summary>
        public static string Exception_NoFieldEnclosingFormatName {
            get {
                return ResourceManager.GetString("Exception_NoFieldEnclosingFormatName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No explicit format name was passed, and the type has no attribute to infer it from.
        /// </summary>
        public static string Exception_NoFormatName {
            get {
                return ResourceManager.GetString("Exception_NoFormatName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata header-parsing functions must not be abstract.
        /// </summary>
        public static string Exception_ParseFunctionAbstract {
            get {
                return ResourceManager.GetString("Exception_ParseFunctionAbstract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata header-parsing functions must be static.
        /// </summary>
        public static string Exception_ParseFunctionNonstatic {
            get {
                return ResourceManager.GetString("Exception_ParseFunctionNonstatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata header-parsing functions must be able to take only an IEnumerable&lt;byte&gt;.
        /// </summary>
        public static string Exception_ParseFunctionParameters {
            get {
                return ResourceManager.GetString("Exception_ParseFunctionParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata header-parsing functions must not be private.
        /// </summary>
        public static string Exception_ParseFunctionPrivate {
            get {
                return ResourceManager.GetString("Exception_ParseFunctionPrivate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata header-parsing functions must return an empty instance of their type.
        /// </summary>
        public static string Exception_ParseFunctionReturn {
            get {
                return ResourceManager.GetString("Exception_ParseFunctionReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {{ {0} }}.
        /// </summary>
        public static string Field_DefaultName {
            get {
                return ResourceManager.GetString("Field_DefaultName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {{ {0} }}.
        /// </summary>
        public static string Field_DefaultValue {
            get {
                return ResourceManager.GetString("Field_DefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parsing field &quot;{Name}&quot; according to generic logic.
        /// </summary>
        public static string Logger_Field_Parse {
            get {
                return ResourceManager.GetString("Logger_Field_Parse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parsing type {Type} from stream.
        /// </summary>
        public static string Logger_GenericParse {
            get {
                return ResourceManager.GetString("Logger_GenericParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling Parse for object of length {Length}.
        /// </summary>
        public static string Logger_GenericParse_Bound {
            get {
                return ResourceManager.GetString("Logger_GenericParse_Bound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling Parse for object of unknown length.
        /// </summary>
        public static string Logger_GenericParse_Bound_Unknown {
            get {
                return ResourceManager.GetString("Logger_GenericParse_Bound_Unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found header matching type {Type}.
        /// </summary>
        public static string Logger_GenericParse_Found {
            get {
                return ResourceManager.GetString("Logger_GenericParse_Found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reading additional bytes into header.
        /// </summary>
        public static string Logger_GenericParse_Header {
            get {
                return ResourceManager.GetString("Logger_GenericParse_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registering all formats in assembly {Assembly}.
        /// </summary>
        public static string Logger_RegisterAll {
            get {
                return ResourceManager.GetString("Logger_RegisterAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formats in assembly have already been registered.
        /// </summary>
        public static string Logger_RegisterAll_PrevAssembly {
            get {
                return ResourceManager.GetString("Logger_RegisterAll_PrevAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking type {Type} for registration.
        /// </summary>
        public static string Logger_RegisterAll_TypeList {
            get {
                return ResourceManager.GetString("Logger_RegisterAll_TypeList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registering type {Type} as a field within {Format}.
        /// </summary>
        public static string Logger_RegisterField {
            get {
                return ResourceManager.GetString("Logger_RegisterField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scanning for format attribute(s) on enclosing types.
        /// </summary>
        public static string Logger_RegisterField_NoFormat {
            get {
                return ResourceManager.GetString("Logger_RegisterField_NoFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scanning for additional field headers.
        /// </summary>
        public static string Logger_RegisterField_ScanHeaders {
            get {
                return ResourceManager.GetString("Logger_RegisterField_ScanHeaders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registering {Method} as a generator for {Field} within {Format}.
        /// </summary>
        public static string Logger_RegisterFieldParser {
            get {
                return ResourceManager.GetString("Logger_RegisterFieldParser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registering type {Type} as {Format}.
        /// </summary>
        public static string Logger_RegisterFormat {
            get {
                return ResourceManager.GetString("Logger_RegisterFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scanning for format attribute(s) on type {Type}.
        /// </summary>
        public static string Logger_RegisterFormat_EmptyGeneric {
            get {
                return ResourceManager.GetString("Logger_RegisterFormat_EmptyGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registering {Method} as a generator for {Format}.
        /// </summary>
        public static string Logger_RegisterFormatParser {
            get {
                return ResourceManager.GetString("Logger_RegisterFormatParser", resourceCulture);
            }
        }
    }
}
