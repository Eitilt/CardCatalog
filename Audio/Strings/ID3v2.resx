<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_NotUnsynchronized" xml:space="preserve">
    <value>Attempted to reverse ID3v2 unsynchronization on a stream with an invalid byte following 0xFF</value>
  </data>
  <data name="Exception_ParsedIntTooLarge" xml:space="preserve">
    <value>Attempting to read a larger integer from ID3 stream than supported by the storage type</value>
  </data>
  <data name="Exception_StreamEnded" xml:space="preserve">
    <value>Reached end of ID3v2 stream while trying to read {0} unsynchronized bytes</value>
    <comment>Must be formatted as a format string
Parameter 0 will be replaced by the length of data that was requested to be read</comment>
  </data>
  <data name="Image_Artist" xml:space="preserve">
    <value>Artist portrait</value>
  </data>
  <data name="Image_ArtistMain" xml:space="preserve">
    <value>Lead artist portrait</value>
  </data>
  <data name="Image_Band" xml:space="preserve">
    <value>Group picture</value>
  </data>
  <data name="Image_Booklet" xml:space="preserve">
    <value>Booklet page</value>
  </data>
  <data name="Image_BrightFish" xml:space="preserve">
    <value>A brightly-colored fish</value>
  </data>
  <data name="Image_Composer" xml:space="preserve">
    <value>Composer portrait</value>
  </data>
  <data name="Image_Conductor" xml:space="preserve">
    <value>Conductor portrait</value>
  </data>
  <data name="Image_CoverBack" xml:space="preserve">
    <value>Back cover</value>
  </data>
  <data name="Image_CoverFront" xml:space="preserve">
    <value>Front cover</value>
  </data>
  <data name="Image_FileIcon" xml:space="preserve">
    <value>File icon</value>
  </data>
  <data name="Image_Illustration" xml:space="preserve">
    <value>Illustration</value>
  </data>
  <data name="Image_Location" xml:space="preserve">
    <value>Location image</value>
  </data>
  <data name="Image_LogoArtist" xml:space="preserve">
    <value>Artist logo</value>
  </data>
  <data name="Image_LogoPublisher" xml:space="preserve">
    <value>Publisher logo</value>
  </data>
  <data name="Image_Medium" xml:space="preserve">
    <value>Medium image</value>
  </data>
  <data name="Image_Other" xml:space="preserve">
    <value>Other image</value>
  </data>
  <data name="Image_OtherIcon" xml:space="preserve">
    <value>Other icon</value>
  </data>
  <data name="Image_Performance" xml:space="preserve">
    <value>Performance image</value>
  </data>
  <data name="Image_ScreenCapture" xml:space="preserve">
    <value>Screen capture</value>
  </data>
  <data name="Image_Session" xml:space="preserve">
    <value>Production image</value>
  </data>
  <data name="Image_Unknown" xml:space="preserve">
    <value>Unknown image</value>
  </data>
  <data name="Image_Writer" xml:space="preserve">
    <value>Author or lyricist portrait</value>
  </data>
</root>