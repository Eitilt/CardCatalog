<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgEitilt.CardCatalog.Audio</name>
    </assembly>
    <members>
        <member name="T:AgEitilt.CardCatalog.Audio.AudioTagAttributes">
            <summary>
            Common format-agnostic attributes specific to audio encoding, mapping
            to different fields depending on the particular metadata format.
            </summary>
            
            <seealso cref="T:AgEitilt.CardCatalog.TagField"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.AudioTagAttributes.Name">
            <summary>
            The display name of the enclosing file.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.AudioTagFormat">
            <summary>
            Common properties to retrieve info from multiple audio formats.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.AudioTagFormat.Attributes">
            <summary>
            The proper standardized field redirects for the enclosing
            metadata format.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.MetadataTag.Fields"/>
            <seealso cref="P:AgEitilt.CardCatalog.Audio.AudioTagFormat.AudioAttributes"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.AudioTagFormat.AudioAttributes">
            <summary>
            The standard field redirects extended with attributes specific to
            audio metadata.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.MetadataTag.Fields"/>
            <seealso cref="P:AgEitilt.CardCatalog.Audio.AudioTagFormat.Attributes"/>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v1">
            <summary>
            An implementation of the ID3v2.4 standard as described at
            <see href="http://id3.org/ID3v1"/>.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v1.Genre">
            <summary>
            The list of genres defined by the standard.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v1Extension">
            <summary>
            Extension methods for the <see cref="T:AgEitilt.CardCatalog.Audio.ID3v1"/> class.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v1Extension.resources">
            <summary>
            Cached reference to the resource dictionary to reduce reflection.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v1Extension.PrintableName(AgEitilt.CardCatalog.Audio.ID3v1.Genre)">
            <summary>
            Convert a <see cref="T:AgEitilt.CardCatalog.Audio.ID3v1.Genre"/> value to a human-readable
            string for the current locale.
            </summary>
            
            <param name="value">The <see cref="T:AgEitilt.CardCatalog.Audio.ID3v1.Genre"/> to format.</param>
            
            <returns>The formatted name.</returns>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2">
            <summary>
            Shared code for all versions of the ID3v2 standard.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.ISO88591">
            <summary>
            ID3v2 string fields use ISO-8859-1 by default but it does not have
            a static reference like <see cref="P:System.Text.Encoding.UTF8"/>,
            so provide one rather than needing to call
            <see cref="M:System.Text.Encoding.GetEncoding(System.String)"/> each time.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.VersionMinor">
            <summary>
            The minor version number of the specification used.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.FlagUnknown">
            <summary>
            Whether the header includes a non-standard tag, which may result
            in unrecognizable data.
            </summary>
            
            <remarks>
            TODO: Store data about the unknown flags rather than simply
            indicating their presence.
            </remarks>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.#ctor">
            <summary>
            Initialize instance properties to default values.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.RetrieveHeader(System.IO.Stream)">
            <summary>
            Retrieve the proper number of bytes from the stream to contain the
            header.
            </summary>
            
            <param name="stream">The stream to read from.</param>
            
            <returns>The number of bytes used by a ID3 header.</returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.UnreadHeader(System.IO.Stream)">
            <summary>
            "Rewind" retrieving the header so that the stream is left in the
            same state as it started in.
            </summary>
            
            <param name="stream">The stream to rewind.</param>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.VerifyBaseHeader(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Check whether the byte array begins with a valid ID3v2 header.
            </summary>
            
            <param name="header">The sequence of bytes to check</param>
            
            <returns>
            `null` if the stream does not begin with a ID3v2 header, and the
            major version if it does.
            </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.Unsynchronize(System.Byte[],System.Boolean@)">
            <summary>
            Manipulate the byte array to remove the historic synchronization
            pattern, according to the ID3v2 specifications.
            </summary>
            
            <param name="input">The byte array to unsynchronize.</param>
            <param name="changed">
            Whether the synchronization pattern was encountered and
            subsequently interrupted.
            </param>
            
            <returns>A new, synchronization-safe byte array.</returns>
            
            <seealso cref="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.DeUnsynchronize(System.Byte[])"/>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.Unsynchronize(System.Byte[],System.Boolean@,System.Boolean@)">
            <summary>
            Manipulate the byte array to remove the historic synchronization
            pattern, according to the ID3v2 specifications.
            </summary>
            
            <param name="input">The byte array to unsynchronize.</param>
            <param name="changed">
            Whether the synchronization pattern was encountered and
            subsequently interrupted.
            </param>
            <param name="endPadding">
            Whether the last byte in <paramref name="input"/> was 0xFF, which
            needs an extra byte of padding if the tag is unsynchronized.
            <para/>
            If (<paramref name="changed"/> == true), this padding `0x00` byte
            is automatically added, but if not (and if a separate -- probably
            later -- tag requires unsynchronization), the byte needs to be
            appended manually.
            </param>
            
            <returns>A new, synchronization-safe byte array.</returns>
            
            <seealso cref="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.DeUnsynchronize(System.Byte[])"/>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.DeUnsynchronize(System.Byte[])">
            <summary>
            Reverse the unsynchronization scheme as described in the ID3v2
            specifications.
            
            </summary>
            <param name="input">
            The byte array on which to reverse unsynchronization.
            </param>
            
            <returns>The pre-unsynchronization byte array.</returns>
            
            <exception cref="T:System.IO.InvalidDataException">
            <paramref name="input"/> is expected to be unsynchronized and a
            basic sanity check is performed to ensure this, but attempting to
            reconstruct a malformed byte array is beyond the intended scope.
            </exception>
            
            <seealso cref="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.Unsynchronize(System.Byte[],System.Boolean@,System.Boolean@)"/>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.ReadBytesAsync(System.IO.Stream,System.UInt32,System.Boolean)">
            <summary>
            Asynchronously read a given number of bytes from a stream,
            optionally reversing ID3v2 unsynchronization.
            </summary>
            
            <param name="stream">The stream to read from.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="unsync">
            Whether the stream is unsynchronized, in which case it's reversed.
            </param>
            
            <returns>
            The Task tracking the byte retrieval operation (number of bytes
            may be less than <paramref name="count"/>).
            </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.GetUnsyncronizedBytes(System.IO.Stream,System.UInt32@)">
            <summary>
            Retrieve a given number of bytes from a stream, properly handling
            ID3v2 unsynchronization.
            </summary>
            
            <param name="stream">The stream to read from.</param>
            <param name="count">
            The number of bytes to retrieve, which is updated to reflect the
            actual number of bytes read.
            </param>
            
            <returns>
            The specified number of de-unsynchronized bytes.
            </returns>
            
            <exception cref="T:System.IO.EndOfStreamException">
            The end of the stream is reached before retrieving the desired
            number of de-unsynchronized bytes.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            <paramref name="stream"/> is expected to be unsynchronized and a
            basic sanity check is performed to ensure this, but attempting to
            reconstruct a malformed byte array is beyond the intended scope.
            </exception>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.ParseBaseHeader(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Extract and encapsulate the code used to parse a ID3v2 header into
            usable variables.
            </summary>
            
            <param name="header">The sequence of bytes to check.</param>
            
            <returns>The flag bits in a more accessible format.</returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.ParseUnsignedInteger(System.IO.Stream,System.Boolean,System.UInt32@,System.UInt32)">
            <summary>
            Read a variable number of bytes as a single integer.
            </summary>
            
            <param name="stream">The source to read from.</param>
            <param name="unsynced">
            Whether the source has been unsynchronized.
            </param>
            <param name="bits">The number of data bits per byte.</param>
            <param name="count">The number of bytes to read.</param>
            
            <returns>The value after combining all bytes.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            Numbers must fit within the proper storage data type (typically
            <paramref name="count"/> must not be more than four bytes for
            ID3v2.3 and five for ID3v2.4).
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The end of the stream is reached before retrieving the desired
            number of de-unsynchronized bytes.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            <paramref name="stream"/> is expected to be unsynchronized and a
            basic sanity check is performed to ensure this, but attempting to
            reconstruct a malformed byte array is beyond the intended scope.
            </exception>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.ParseUnsignedInteger(System.Byte[],System.UInt32)">
            <summary>
            Read a variable number of bytes as a single integer.
            </summary>
            
            <param name="bytes">The source to read from.</param>
            <param name="bits">The number of data bits per byte.</param>
            
            <returns>The value after combining all bytes.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            Numbers must fit within the proper storage data type (typically
            <paramref name="bytes"/> must not be more than four bytes long for
            ID3v2.3 and five for ID3v2.4).
            </exception>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v2.ParseUnsignedInteger(System.Collections.Generic.IEnumerable{System.Byte},System.UInt32)">
            <summary>
            Read a variable number of bytes as a single integer.
            </summary>
            
            <param name="bytes">The source to read from.</param>
            <param name="bits">The number of data bits per byte.</param>
            
            <returns>The value after combining all bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Numbers must fit within the proper storage data type (typically
            <paramref name="bytes"/> must not be more than four bytes long for
            ID3v2.3 and five for ID3v2.4).
            </exception>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus">
            <summary>
            Shared code for ID3v2.3 and later.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.ExtendedHeaderProps">
            <summary>
            Minor behaviour dependent on the version of the specification.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.ExtendedHeaderProps.sizeIncludesItself">
            <summary>
            Whether the listed size of the extended header includes the
            four bytes containing that size.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.ExtendedHeaderProps.bitsInSize">
            <summary>
            The number of content bits per byte used to store the size.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.ExtendedHeader">
            <summary>
            Minor behaviour dependent on the version of the specification.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.HasExtendedHeader">
            <summary>
            Indicates that the tag contains an extended header that needs to
            be parsed before any fields.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.IsExperimental">
            <summary>
            Indicates that the tag is in an experimental stage.
            </summary>
            
            <remarks>Just as ill-defined in the ID3v2 specification.</remarks>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.TagCRC">
            <summary>
            The CRC calculated for the data in the tag, or `null` if is was
            not (yet) read.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.#ctor">
            <summary>
            Initialize instance properties to default values.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.ReadExtHeaderWithTagAsync(System.IO.Stream,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Parse an ID3v2 extended header starting at the current position in
            the stream, while retrieving the remainder of the tag in the
            background.
            </summary>
            
            <param name="stream">The stream to read from.</param>
            <param name="tagSize">The total size of the ID3v2 tag.</param>
            <param name="useUnsync">
            Whether the entire tag has been unsynchronized.
            </param>
            <param name="extendedHeaderPresent">
            Whether the tag contains an extended header.
            </param>
            
            <returns>
            The remainder of the ID3v2 tag, already processed to reverse any
            unsynchronization.
            </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.ParseExtendedHeader(System.Byte[])">
            <summary>
            Extract and encapsulate the code used to parse a ID3v2 extended
            header into usable variables.
            <para/>
            Given that arrays have an inherent Length property, the first four
            bytes (storing the size) are ignored.
            </summary>
            
            <remarks>
            This takes a `byte[]` rather than a `Stream` like
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.ReadExtHeaderWithTagAsync(System.IO.Stream,System.UInt32,System.Boolean,System.Boolean)"/>
            because this is intended to be called on pre-processed data of the
            proper length, rather than the raw bytestream.
            </remarks>
            
            <param name="extHeader">
            The de-unsynchronized byte array to parse.
            </param>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.ID3v23Plus.CheckCRCIfPresent(System.Byte[])">
            <summary>
            Compares the CRC saved in the tag with that calculated from the
            given data to ensure no corruption has occurred.
            </summary>
            <param name="tag">
            The data over which to calculate the CRC.
            </param>
            <returns>
            True if no CRC was saved or if it matches that calculated for the
            data, false if they differ.
            </returns>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V2">
            <summary>
            An implementation of the ID3v2.2 standard as described at
            <see href="http://id3.org/id3v2-00"/>
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V2.format">
            <summary>
            The short name used to represent ID3v2.2 metadata.
            </summary>
            
            <seealso cref="M:AgEitilt.CardCatalog.MetadataFormat.Register``1(System.String)"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V2.Format">
            <summary>
            The display name of the tag format.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V2.VerifyHeader(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Check whether the stream begins with a valid ID3v2.2 header.
            </summary>
            
            <param name="header">The sequence of bytes to check.</param>
            
            <returns>
            An empty <see cref="T:AgEitilt.CardCatalog.Audio.ID3v2.V2"/> object if the header is in the proper
            format, `null` otherwise.
            </returns>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V2.fields">
            <summary>
            The underlying low-level tag data.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V2.FieldBase"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V2.FieldBase">
            <summary>
            An editable redirect for the low-level data.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V2.AttributeStruct">
            <summary>
            Implement the audio field attribute mappings for ID3v2.2 tags.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V2.AudioAttributes">
            <summary>
            Retrieve the audio field attribute mappings for ID3v2.2 tags.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.MetadataTag.Fields"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V2.Compressed">
            <summary>
            Indicates whether the data in the tag has been compressed; the
            ID3v2.2 spec recommends ignoring the tag if so.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V2.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Parse a stream according the proper version of the ID3v2
            specification, from the current location.
            </summary>
            
            <remarks>
            As according to the recommendation in the ID3v2.2 specification,
            if the tag is compressed, it is swallowed but largely ignored.
            </remarks>
            
            <param name="header">The stream to parse.</param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V2.FieldTypes">
            <summary>
            Fields defined in the ID3v2.2 standard.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V3">
            <summary>
            An implementation of the ID3v2.3 standard as described at
            <see href="http://id3.org/d3v2.3.0"/>
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V3.format">
            <summary>
            The short name used to represent ID3v2.3 metadata.
            </summary>
            
            <seealso cref="M:AgEitilt.CardCatalog.MetadataFormat.Register``1(System.String)"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V3.Format">
            <summary>
            The display name of the tag format.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V3.ExtendedHeader">
            <summary>
            Describe the behaviour of the extended header.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V3.VerifyHeader(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Check whether the stream begins with a valid ID3v2.3 header.
            </summary>
            
            <param name="header">The sequence of bytes to check.</param>
            
            <returns>
            An empty <see cref="T:AgEitilt.CardCatalog.Audio.ID3v2.V2"/> object if the header is in the proper
            format, `null` otherwise.
            </returns>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V3.fields">
            <summary>
            The underlying low-level tag data.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V3.FieldBase"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V3.FieldBase">
            <summary>
            An editable redirect for the low-level data.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V3.AttributeStruct">
            <summary>
            Implement the audio field attribute mappings for ID3v2.3 tags.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V3.AudioAttributes">
            <summary>
            Retrieve the audio field attribute mappings for ID3v2.3 tags.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.MetadataTag.Fields"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V3.PaddingSize">
            <summary>
            The size of the empty padding at the end of the tag.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V3.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Parse a stream according the proper version of the ID3v2
            specification, from the current location.
            </summary>
            
            <remarks>
            As according to the recommendation in the ID3v2.2 specification,
            if the tag is compressed, it is swallowed but largely ignored.
            </remarks>
            
            <param name="header">The stream to parse.</param>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V3.ParseExtendedHeader(System.Byte[])">
            <summary>
            Extract and encapsulate the code used to parse a ID3v2 extended
            header into usable variables.
            <para/>
            Given that arrays have an inherent Length property, the first four
            bytes (storing the size) are ignored.
            </summary>
            
            <param name="extHeader">
            The de-unsynchronized byte array to parse.
            </param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V3.FieldTypes">
            <summary>
            Fields specific to the ID3v2.3 standard.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4">
            <summary>
            An implementation of the ID3v2.4 standard as described at
            <see href="http://id3.org/id3v2.4.0-structure"/> and
            <see href="http://id3.org/id3v2.4.0-frames"/>
            </summary>
            
            <remarks>
            TODO: Handle footer
            </remarks>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.format">
            <summary>
            The short name used to represent ID3v2.4 metadata.
            </summary>
            
            <seealso cref="M:AgEitilt.CardCatalog.MetadataFormat.Register``1(System.String)"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.Format">
            <summary>
            The display name of the tag format.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.ExtendedHeader">
            <summary>
            Describe the behaviour of the extended header.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.VerifyHeader(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Check whether the stream begins with a valid ID3v2.4 header.
            </summary>
            
            <param name="header">The sequence of bytes to check.</param>
            
            <returns>
            An empty <see cref="T:AgEitilt.CardCatalog.Audio.ID3v2.V2"/> object if the header is in the proper
            format, `null` otherwise.
            </returns>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.fields">
            <summary>
            The underlying low-level tag data.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FieldBase"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FieldBase">
            <summary>
            An editable redirect for the low-level data.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.AttributeStruct">
            <summary>
            Implement the audio field attribute mappings for ID3v2.4 tags.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.AudioAttributes">
            <summary>
            Retrieve the audio field attribute mappings for ID3v2.4 tags.
            </summary>
            
            <seealso cref="P:AgEitilt.CardCatalog.MetadataTag.Fields"/>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.HasFooter">
            <summary>
            Whether the tag is closed with a footer.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.TagIsUpdate">
            <summary>
            Whether this tag updates any previous tags
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Parse a stream according the proper version of the ID3v2
            specification, from the current location.
            </summary>
            
            <remarks>
            As according to the recommendation in the ID3v2.2 specification,
            if the tag is compressed, it is swallowed but largely ignored.
            </remarks>
            
            <param name="header">The stream to parse.</param>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.ParseExtendedHeader(System.Byte[])">
            <summary>
            Extract and encapsulate the code used to parse a ID3v2 extended
            header into usable variables.
            <para/>
            Given that arrays have an inherent Length property, the first four
            bytes (storing the size) are ignored.
            </summary>
            
            <param name="extHeader">
            The de-unsynchronized byte array to parse.
            </param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field">
            <summary>
            Encapsulate parsing ID3v2.4 headers to reduce the functions each
            field is required to implement.
            </summary>
            
            <remarks>
            This needs to be located between <see cref="T:AgEitilt.CardCatalog.TagField"/> and the
            field classes in the inheritance hierarchy in order for the type
            registration to recognize the <see cref="T:AgEitilt.CardCatalog.HeaderParserAttribute"/>.
            </remarks>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.fields">
            <summary>
            Reduce the lookups of field types by caching the return.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.HeaderChars">
            <summary>
            Valid ID3v2 field identification characters.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.padding">
            <summary>
            A byte sequence indicating that the "header" read is actually
            padding rather than data.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.flags">
            <summary>
            The flags set on the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.DiscardUnknownOnTagEdit">
            <summary>
            Indicates that this field should be removed if the tag is
            edited in any way, and the program doesn't know how to
            compensate.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.DiscardUnknownOnFileEdit">
            <summary>
            Indicates that this field should be removed if the file
            external to the tag is edited in any way EXCEPT if the audio
            is completely replaced, and the program doesn't know how to
            compensate.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.ReadOnlyIfUnknown">
            <summary>
            Indicates that this field should not be changed without direct
            knowledge of its contents and structure.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.FlagUnknown">
            <summary>
            Whether the header includes a non-standard tag, which may result
            in unrecognizable data.
            </summary>
            
            <remarks>
            TODO: Store data about the unknown flags rather than simply
            indicating their presence.
            </remarks>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.group">
            <summary>
            The group identifier for associating multiple fields, or
            `null` if this field isn't part of any group.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Check whether the stream begins with a valid field header.
            </summary>
            
            <param name="header">The sequence of bytes to check.</param>
            
            <returns>
            An empty <see cref="T:AgEitilt.CardCatalog.TagField"/> object if the header is in the
            proper format, `null` otherwise.
            </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Parse(System.IO.Stream)">
            <summary>
            Read a sequence of bytes in the manner appropriate to the
            specific type of field.
            </summary>
            
            <param name="stream">The data to read.</param>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.ParseData(System.IO.Stream)">
            <summary>
            Preform field-specific parsing after the required common
            parsing has been handled.
            </summary>
            
            <param name="stream">The data to read.</param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields">
            <summary>
            Fields specific to the ID3v2.4 standard.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId">
            <summary>
            An identifier unique to a particular database.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.header">
            <summary>
            The easy representation of the field header.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.SystemName">
            <summary>
            The byte header used to internally identify the field.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.owner">
            <summary>
            The database with which this ID is associated.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.id">
            <summary>
            The raw identifier.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UniqueFileId.ParseData(System.IO.Stream)">
            <summary>
            Preform field-specific parsing after the required common
            parsing has been handled.
            </summary>
            
            <param name="stream">The data to read.</param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame">
            <summary>
            Any of the many tags containing purely textual data.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.NameGenerator">
            <summary>
            Generate all text field headers that aren't handled by
            other specialized classes.
            </summary>
            
            <returns>
            The field headers using default text formatting.
            </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.header">
            <summary>
            The raw field header.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName">
            <summary>
            The byte header used to internally identify the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.DefaultName">
            <summary>
            The name to use if the header was not matched.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.Subtitle">
            <summary>
            Extra human-readable information describing the field, such as the
            "category" of a header with multiple realizations.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.BaseName">
            <summary>
            Circumvent the title parsing for subclasses that know the
            field doesn't contain basic text data.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.values">
            <summary>
            All strings contained within this field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.ReadFromByteOrderMark(System.Byte[])">
             <summary>
             Read a sequence of bytes according to the encoding implied
             by a byte-order-mark at the head.
             </summary>
             
             <remarks>
             TODO: Split this into its own class, as it includes
             support for more encodings than ID3v2 does.
             </remarks>
            
             <param name="data">The bytes to decode.</param>
             
             <returns>
             The decoded string, or `null` if <paramref name="data"/>
             isn't headed by a recognized byte-order-mark.
             </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.TryGetEncoding(System.Byte)">
            <summary>
            Convert a ID3v2 byte representation of an encoding into the
            proper <see cref="T:System.Text.Encoding"/> object.
            </summary>
            
            <param name="enc"></param>
            
            <returns>
            The proper <see cref="T:System.Text.Encoding"/>, or `null` if the encoding
            is either unrecognized or "Detect Unicode endianness from byte
            order marker."
            </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SplitStrings(System.Byte[],System.Text.Encoding)">
            <summary>
            Parse a sequence of bytes as a list of null-separated
            strings.
            </summary>
            
            <param name="data">The raw bytestream.</param>
            <param name="encoding">
            The text encoding to use in decoding <paramref name="data"/>,
            or `null` if each string begins with a byte order marker
            which may be used to detect the encoding dynamically.
            </param>
            
            <returns>The separated and parsed strings.</returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.ParseData(System.IO.Stream)">
            <summary>
            Preform field-specific parsing after the required common
            parsing has been handled.
            </summary>
            
            <param name="stream">The data to read.</param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.OfNumberFrame">
            <summary>
            A frame containing the track number.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.OfNumberFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.OfNumberFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
            
            <remarks>
            The default case should never occur, but is provided for
            future-proofing purposes.
            </remarks>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.OfNumberFrame.DefaultName">
            <summary>
            The name to use if the header was not matched.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.OfNumberFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.IsrcFrame">
            <summary>
            A frame containing the track number.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.IsrcFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.IsrcFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.IsrcFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame">
            <summary>
            A frame containing a mapping of role to person.
            </summary>
            
            <remarks>
            TODO: This is a good candidate for allowing multiple subtitles
            in some form.
            </remarks>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
            
            <remarks>
            The default case should never occur, but is provided for
            future-proofing purposes.
            </remarks>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame.DefaultName">
            <summary>
            The name to use if the header was not matched.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MsFrame">
            <summary>
            A frame containing a length of time, in milliseconds.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MsFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MsFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
            
            <remarks>
            The default case should never occur, but is provided for
            future-proofing purposes.
            </remarks>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MsFrame.DefaultName">
            <summary>
            The name to use if the header was not matched.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MsFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.KeyFrame">
            <summary>
            A frame containing the musical key.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.KeyFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.KeyFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.KeyFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LanguageFrame">
            <summary>
            A frame containing the language sung/spoken.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LanguageFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LanguageFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LanguageFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
            
            <remarks>
            TODO: Needs better ISO 639-2 lookup ability: see solution
            at http://stackoverflow.com/questions/12485626/replacement-for-cultureinfo-getcultures-in-net-windows-store-apps
            Might also be nice to add e.g. ISO 639-3 support in the
            same package ("CultureExtensions").
            </remarks>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.GenreFrame">
            <summary>
            A frame containing the genre.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.GenreFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.GenreFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.GenreFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
            
            <remarks>
            TODO: Split "Remix" and "Cover" into separately-displayed
            field; likely same fix as <see cref="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame"/>.
            </remarks>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.FiletypeFrame">
            <summary>
            A frame containing the genre.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.FiletypeFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.FiletypeFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.FiletypeFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
            
            <remarks>
            TODO: Split "Remix" and "Cover" into separately-displayed
            field; likely same fix as <see cref="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame"/>.
            </remarks>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MediumFrame">
            <summary>
            A frame containing the genre.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MediumFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MediumFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.MediumFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
            
            <remarks>
            TODO: Split "Remix" and "Cover" into separately-displayed
            field; likely same fix as <see cref="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ListMappingFrame"/>.
            </remarks>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CopyrightFrame">
            <summary>
            A frame containing copyright information.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CopyrightFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CopyrightFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CopyrightFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.PCopyrightFrame">
            <summary>
            A frame containing copyright information.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.PCopyrightFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.PCopyrightFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.PCopyrightFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TimeFrame">
            <summary>
            A frame containing a timestamp.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TimeFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TimeFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
            
            <remarks>
            The default case should never occur, but is provided for
            future-proofing purposes.
            </remarks>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TimeFrame.DefaultName">
            <summary>
            The name to use if the header was not matched.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TimeFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ITunesCompilationFrame">
            <summary>
            A frame containing the "Compilation" flag defined by iTunes.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ITunesCompilationFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ITunesCompilationFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.ITunesCompilationFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserTextFrame">
            <summary>
            A frame containing encoder-defined text.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserTextFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserTextFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserTextFrame.Subtitle">
            <summary>
            The description of the contained values.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserTextFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UrlFrame">
            <summary>
            Any frame containing a URL. By the specification, these differ
            from the base text by having a maximum of one occurrence and
            only allowing the ISO-8859-1 encoding.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UrlFrame.NameGenerator">
            <summary>
            Generate all text field headers that aren't handled by
            other specialized classes.
            </summary>
            
            <returns>
            The field headers using default text formatting.
            </returns>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UrlFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UrlFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UrlFrame.DefaultName">
            <summary>
            The name to use if the header was not matched.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UrlFrame.ParseData(System.IO.Stream)">
            <summary>
            Read a sequence of bytes in the manner appropriate to the
            specific type of field.
            </summary>
            
            <param name="stream">The data to read.</param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserUrlFrame">
            <summary>
            A frame containing an encoder-defined URL.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserUrlFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserUrlFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserUrlFrame.Subtitle">
            <summary>
            The description of the contained values.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.UserUrlFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame">
            <summary>
            A frame containing text with a language, a description, and
            non-null-separated text.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame.description">
            <summary>
            The description of the lyrics instance.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame.language">
            <summary>
            The language in which the lyrics are
            transcribed/translated.
            </summary>
            
            <remarks>
            TODO: Replace with <see cref="T:System.Globalization.CultureInfo"/> object.
            </remarks>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame.Subtitle">
            <summary>
            Extra human-readable information describing the field, such as the
            "category" of a header with multiple realizations.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
            
            <remarks>
            TODO: Needs better ISO 639-2 lookup ability: see solution
            at http://stackoverflow.com/questions/12485626/replacement-for-cultureinfo-getcultures-in-net-windows-store-apps
            Might also be nice to add e.g. ISO 639-3 support in the
            same package ("CultureExtensions").
            </remarks>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.LongTextFrame.ParseData(System.IO.Stream)">
            <summary>
            Preform field-specific parsing after the required common
            parsing has been handled.
            </summary>
            
            <param name="stream">The data to read.</param>
        </member>
        <member name="T:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame">
            <summary>
            A frame containing a single binary counter.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame.#ctor(System.Byte[],System.Int32)">
            <summary>
            The constructor required by
            <see cref="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.V4Field.Initialize(System.Collections.Generic.IEnumerable{System.Byte})"/>. This
            should not be called manually.
            </summary>
            
            <param name="name">
            The value to save to <see cref="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.TextFrame.SystemName"/>.
            </param>
            <param name="length">
            The value to save to <see cref="P:AgEitilt.CardCatalog.TagField.Length"/>.
            </param>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame.header">
            <summary>
            The easy representation of the field header.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame.SystemName">
            <summary>
            The byte header used to internally identify the field.
            </summary>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame.Name">
            <summary>
            The human-readable name of the field.
            </summary>
        </member>
        <member name="F:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame.count">
            <summary>
            The value contained by this field.
            </summary>
            
            <remarks>
            The specification implements a potentially-infinite
            integer, but a `ulong` should in theory never overflow
            given the effort required to play one file of a one song
            18,446,744,073,709,551,615 times.
            
            TODO: Probably should allow that
            18,446,744,073,709,551,616th play anyway.
            </remarks>
        </member>
        <member name="P:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame.Values">
            <summary>
            All values contained within this field.
            </summary>
        </member>
        <member name="M:AgEitilt.CardCatalog.Audio.ID3v2.V4.FormatFields.CountFrame.ParseData(System.IO.Stream)">
            <summary>
            Preform field-specific parsing after the required common
            parsing has been handled.
            </summary>
            
            <param name="stream">The data to read.</param>
        </member>
    </members>
</doc>
